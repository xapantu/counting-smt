(set-info :smt-lib-version 2.0)
(set-logic QF_ALIRA)
(declare-fun N_PID () Int)
(declare-range PID (0 N_PID))
(declare-fun |s0.round| () Real)
(assert (and (= |s0.round| 0) (> N_PID 3)))
(declare-fun |s1.round| () Real)
(declare-fun |s0.cx| () (Array PID Bool))
(declare-fun |s1.cx| () (Array PID Bool))
(assert (or (and (> 2 |s0.round|) (= (# ((|var!!0| PID)) (select |s1.cx| |var!!0|)) N_PID) (= |s1.round| (+ |s0.round| 1))) (and (= |s0.round| 2) (= |s0.cx| |s1.cx|) (= |s0.round| |s1.round|))))
(declare-fun |s2.round| () Real)
(declare-fun |s2.cx| () (Array PID Bool))
(assert (or (and (> 2 |s1.round|) (= (# ((|var!!0| PID)) (select |s2.cx| |var!!0|)) N_PID) (= |s2.round| (+ |s1.round| 1))) (and (= |s1.round| 2) (= |s1.cx| |s2.cx|) (= |s1.round| |s2.round|))))
(declare-fun |s3.round| () Real)
(declare-fun |s3.cx| () (Array PID Bool))
(assert (or (and (> 2 |s2.round|) (= (# ((|var!!0| PID)) (select |s3.cx| |var!!0|)) N_PID) (= |s3.round| (+ |s2.round| 1))) (and (= |s2.round| 2) (= |s2.cx| |s3.cx|) (= |s2.round| |s3.round|))))
(assert (not (=> (>= |s3.round| 2) (= (# ((|var!!0| PID)) (select |s3.cx| |var!!0|)) N_PID))))
(check-sat)
